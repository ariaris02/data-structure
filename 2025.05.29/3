#include <stdio.h>
#include <stdlib.h>

// 트리 노드 구조체 정의
typedef struct treeNode {
    char data;
    struct treeNode* left;
    struct treeNode* right;
} treeNode;

// 노드 생성 함수
treeNode* makeRootNode(char data, treeNode* left, treeNode* right) {
    treeNode* node = (treeNode*)malloc(sizeof(treeNode));
    node->data = data;
    node->left = left;
    node->right = right;
    return node;
}

// 전위 순회: 루트 -> 왼쪽 -> 오른쪽
void preorder(treeNode* root) {
    if (root != NULL) {
        printf("%c ", root->data);
        preorder(root->left);
        preorder(root->right);
    }
}

// 중위 순회: 왼쪽 -> 루트 -> 오른쪽
void inorder(treeNode* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%c ", root->data);
        inorder(root->right);
    }
}

// 후위 순회: 왼쪽 -> 오른쪽 -> 루트
void postorder(treeNode* root) {
    if (root != NULL) {
        postorder(root->left);
        postorder(root->right);
        printf("%c ", root->data);
    }
}

int main() {
    printf("2025-05-22, 24115960, 백수진\n");

    // 트리 노드 구성
    treeNode* n7 = makeRootNode('2', NULL, NULL);
    treeNode* n6 = makeRootNode('8', NULL, NULL);
    treeNode* n5 = makeRootNode('5', NULL, NULL);
    treeNode* n4 = makeRootNode('3', NULL, NULL);
    treeNode* n3 = makeRootNode('/', n6, n7);
    treeNode* n2 = makeRootNode('*', n4, n5);
    treeNode* n1 = makeRootNode('-', n2, n3);  // 루트

    // 순회 결과 출력
    printf("\npreorder   : ");
    preorder(n1);

    printf("\ninorder    : ");
    inorder(n1);

    printf("\npostorder  : ");
    postorder(n1);

    printf("\n");

    return 0;
}
