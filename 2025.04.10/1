#include <stdio.h>
#include <stdlib.h>

// 노드 구조 정의
typedef struct ListNode {
    char data;
    struct ListNode* link;
} ListNode;

ListNode* Head = NULL;   // Head 노드 정의
char del_value = 'NULL'; // 제거된 노드의 데이터 저장

void display(ListNode* list) {
    printf("# Linked List Wt : ");

    list = Head;
    while (list != NULL) {
        printf(" %c ", list->data);
        list = list->link;
    }

    printf("\n");
}

void Add_first(ListNode* list, char x) {
    ListNode* newnode;
    newnode = (ListNode*)malloc(sizeof(ListNode));

    newnode->data = x;
    if (Head == NULL) {
        newnode->link = NULL;
        Head = newnode;
    } else { // 기존 리스트가 존재하는 경우
        newnode->link = Head;
        Head = newnode;
    }
}

void Add_last(ListNode* list, char x) {
    ListNode* newnode, *temp;
    newnode = (ListNode*)malloc(sizeof(ListNode));
    newnode->data = x;
    newnode->link = NULL;
    temp = Head;
    while (temp->link != NULL) {
        temp = temp->link;
    }
    temp->link = newnode;
}

void Del_first(ListNode* list) {
    ListNode* target = NULL;

    if (Head == NULL)
        printf("List is Empty!!\n");
    else {
        target = Head;
        del_value = target->data;
        Head = target->link;
        free(target);
    }
}

void Del_last(ListNode* list) {
    ListNode* target, *pre;

    pre = Head;
    target = Head->link;
    if (target == NULL) { // 리스트에 노드 1개
        del_value = pre->data;
        Head = NULL;
        return;
    }

    while (target->link != NULL) {
        pre = target;
        target = target->link;
    }

    del_value = target->data;
    pre->link = NULL;
    free(target);
}

void Del_item(ListNode* list, char x) {
    ListNode* pt1, *pt2, *item;
    pt1 = Head;
    pt2 = pt1->link;
    item = pt1;
    if (item->data == x)
        Head = pt1->link;
    else {
        while (pt2 != NULL) {
            if (pt2->data == x) {
                item = pt2;
                pt1->link = pt2->link;
                break;
            }
            pt1 = pt2;
            pt2 = pt2->link;
        }
    }
    del_value = item->data;
    free(item);
}
void Reverse(ListNode* list) {
    ListNode* p1, *p2, *p3;
    p1 = Head; p2 = NULL; p3 = NULL;
    while (p1 != NULL) {
        p3 = p2;
        p2 = p1;
        p1 = p1->link;
        p2->link = p3;
    }
    Head = p2;
}

void main() {
    ListNode* List_1 = NULL; // 공백 리스트(List_1) 생성
    List_1 = Head;
    printf("2025-04-10,24115960, 백수진");
    printf("\n== 공백 리스트 ==\n"); 
    display(List_1);

    // List_1 맨 앞에 A 삽입 (A)
    printf("\n== Add_first('A') ==\n"); 
    Add_first(List_1, 'A'); 
    display(List_1);

    // List_1 마지막에 B 삽입 (A B)
    printf("\n== Add_last('B') ==\n"); 
    Add_last(List_1, 'B'); 
    display(List_1);

    // List_1 마지막에 C 삽입 (A B C)
    printf("\n== Add_last('C') ==\n"); 
    Add_last(List_1, 'C'); 
    display(List_1);

    // List_1 맨 앞에 D 삽입 (D A B C)
    printf("\n== Add_first('D') ==\n"); 
    Add_first(List_1, 'D'); 
    display(List_1);

    printf("\n== 연결리스트의 역방향 연결 ==\n"); 
    Reverse(List_1); // 역방향 연결 함수 호출
    display(List_1); // C B A D

    printf("\n== 첫 번째 노드 삭제 ==\n"); 
    Del_first(List_1); 
    display(List_1); // B A D
    printf("\t * del_value : %c\n", del_value); // C 삭제

    printf("\n== B노드 삭제 ==\n"); 
    Del_item(List_1, 'B'); 
    display(List_1); // A D
    printf("\t * del_value : %c\n", del_value); // B 삭제

    printf("\n== 마지막 노드 삭제 ==\n"); 
    Del_last(List_1); 
    display(List_1); // A
    printf("\t * del_value : %c\n", del_value); // D 삭제

    printf("\n== Add_last('+') 후 연결리스트 ==\n"); 
    Add_last(List_1, '+'); // List_1 마지막에 + 삽입 (A +)
    display(List_1);
}